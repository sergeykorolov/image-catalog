{"version":3,"sources":["api/api.js","store/images-reducer.ts","components/Image/Image.tsx","components/GroupImages/GroupImages.tsx","App.tsx","store/store.ts","index.tsx"],"names":["imageAPI","tag","axios","get","SET_IMAGE","CLEAR_PAGE","TOGGLE_IS_LOADING","CHANGE_ERROR_TEXT","SET_TAGS","SET_INPUT_TEXT","initialState","images","tags","isLoading","isImageUrl","errorText","inputText","addImage","imageUrl","type","toggleIsLoading","changeErrorText","setInputText","getComposedImage","reqTags","dispatch","a","requests","map","Promise","all","results","imageUrls","isHttpError","forEach","item","status","data","image_url","push","length","join","imagesReducer","state","action","imageTag","image","Image","randomString","useDispatch","className","onClick","src","alt","GroupImages","groupTag","App","useState","isGroup","setGroup","timerId","setTimerId","invalidInput","setInvalidInput","isDelay","setDelay","useSelector","AllTags","uniqueTags","Set","generateString","possible","textLength","Math","floor","random","text","i","charAt","onClearImages","reTags","onChange","e","test","String","target","value","disabled","intervalId","setInterval","randomTag","clearInterval","split","includes","onSearchImage","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d970dcc7.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const imageAPI = {\r\n    getImage(tag) {\r\n        return axios.get(`https://api.giphy.com/v1/gifs/random?api_key=gTJAO48YcpmrADUyo4opy4ES4g7iDBxx&tag=${tag}`)\r\n    }\r\n}","import { Dispatch } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n// eslint-disable-next-line import/extensions\nimport { imageAPI } from '../api/api';\nimport { ImageType } from '../types/types';\nimport { AppStateType } from './store';\n\nconst SET_IMAGE = 'SET_IMAGE';\nconst CLEAR_PAGE = 'CLEAR_PAGE';\nconst TOGGLE_IS_LOADING = 'TOGGLE_IS_LOADING';\nconst CHANGE_ERROR_TEXT = 'CHANGE_RESPONSE_ERROR';\nconst SET_TAGS = 'SET_TAGS';\nconst SET_INPUT_TEXT = 'SET_INPUT_TEXT';\n\nconst initialState = {\n  images: [] as Array<ImageType>,\n  tags: [] as Array<string>,\n  isLoading: false,\n  isImageUrl: true,\n  errorText: '',\n  inputText: '',\n};\n\ntype InitialStateType = typeof initialState;\n\nconst imagesReducer = (\n  state = initialState,\n  action: ActionTypes,\n): InitialStateType => {\n  switch (action.type) {\n    case SET_IMAGE:\n      return {\n        ...state,\n        images: [\n          ...state.images,\n          { imageTag: action.tag, imageUrl: action.imageUrl },\n        ],\n      };\n    case SET_TAGS:\n      return {\n        ...state,\n        tags: [...state.images.map((image) => image.imageTag)],\n      };\n    case CLEAR_PAGE:\n      return {\n        ...state,\n        images: [],\n        tags: [],\n      };\n    case TOGGLE_IS_LOADING:\n      return { ...state, isLoading: action.isLoading };\n    case CHANGE_ERROR_TEXT:\n      return { ...state, errorText: action.errorText };\n    case SET_INPUT_TEXT:\n      return { ...state, inputText: action.inputText };\n    default:\n      return state;\n  }\n};\n\ntype ActionTypes =\n  | AddImageType\n  | ClearPageType\n  | ToggleIsLoadingType\n  | ChangeErrorTextType\n  | SetTagsType\n  | SetInputTextType;\n\ntype AddImageType = {\n  type: typeof SET_IMAGE;\n  tag: string;\n  imageUrl: Array<string>;\n};\nexport const addImage = (\n  tag: string,\n  imageUrl: Array<string>,\n): AddImageType => ({\n  type: SET_IMAGE,\n  tag,\n  imageUrl,\n});\n\ntype ClearPageType = {\n  type: typeof CLEAR_PAGE;\n};\nexport const clearPage = () => ({ type: CLEAR_PAGE });\n\ntype ToggleIsLoadingType = {\n  type: typeof TOGGLE_IS_LOADING;\n  isLoading: boolean;\n};\nexport const toggleIsLoading = (isLoading: boolean): ToggleIsLoadingType => ({\n  type: TOGGLE_IS_LOADING,\n  isLoading,\n});\n\ntype ChangeErrorTextType = {\n  type: typeof CHANGE_ERROR_TEXT;\n  errorText: string;\n};\nexport const changeErrorText = (errorText: string): ChangeErrorTextType => ({\n  type: CHANGE_ERROR_TEXT,\n  errorText,\n});\n\ntype SetTagsType = {\n  type: typeof SET_TAGS;\n};\nexport const setTags = (): SetTagsType => ({\n  type: SET_TAGS,\n});\n\ntype SetInputTextType = {\n  type: typeof SET_INPUT_TEXT;\n  inputText: string;\n};\nexport const setInputText = (inputText: string): SetInputTextType => ({\n  type: SET_INPUT_TEXT,\n  inputText,\n});\n\ntype DispatchType = Dispatch<ActionTypes>;\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>;\n\nexport const getComposedImage = (reqTags: Array<string>): ThunkType => {\n  return async (dispatch: DispatchType) => {\n    dispatch(toggleIsLoading(true));\n    const requests = reqTags.map((tag) => {\n      return imageAPI.getImage(tag);\n    });\n    const results = await Promise.all(requests);\n    const imageUrls = [] as Array<string>;\n    let isHttpError = false;\n    results.forEach((item) => {\n      if (item.status !== 200) {\n        isHttpError = true;\n      } else if (item.data.data.image_url) {\n        imageUrls.push(item.data.data.image_url);\n      }\n    });\n    if (isHttpError) {\n      dispatch(changeErrorText('Произошла http ошибка'));\n    } else if (results.length !== imageUrls.length) {\n      dispatch(changeErrorText('По тегу ничего не найдено'));\n    } else {\n      const tag = reqTags.join(',');\n      dispatch(addImage(tag, imageUrls));\n      dispatch(changeErrorText(''));\n      dispatch(setTags());\n    }\n    dispatch(toggleIsLoading(false));\n  };\n};\n\nexport default imagesReducer;\n","import React, { FC } from 'react';\nimport './Image.scss';\nimport { useDispatch } from 'react-redux';\nimport { setInputText } from '../../store/images-reducer';\n\ntype PropsType = {\n  imageTag: string;\n  imageUrl: Array<string>;\n  randomString: string;\n};\n\n// eslint-disable-next-line react/prop-types\nconst Image: FC<PropsType> = ({ imageTag, imageUrl, randomString }) => {\n  const dispatch = useDispatch();\n\n  const onChangeTag = () => {\n    dispatch(setInputText(imageTag));\n  };\n\n  return (\n    <button type=\"button\" className=\"img_block\" onClick={() => onChangeTag()}>\n      {imageUrl &&\n        // eslint-disable-next-line react/prop-types\n        imageUrl.map((image) => (\n          <img src={image} alt=\"\" key={image + randomString} />\n        ))}\n    </button>\n  );\n};\n\nexport default Image;\n","import React, { FC } from 'react';\nimport Image from '../Image/Image';\nimport { ImageType } from '../../types/types';\nimport './GroupImages.scss';\n\ntype PropsType = {\n  groupTag: string;\n  images: Array<ImageType>;\n  randomString: string;\n};\n\n// eslint-disable-next-line react/prop-types\nconst GroupImages: FC<PropsType> = ({ groupTag, images, randomString }) => {\n  return (\n    <div className=\"group\">\n      <h2 className=\"group__title\">{groupTag}</h2>\n      <div className=\"group__images\">\n        {/* eslint-disable-next-line react/prop-types */}\n        {images.map((image: ImageType) =>\n          image.imageTag === groupTag ? (\n            <Image\n              imageUrl={image.imageUrl}\n              imageTag={image.imageTag}\n              key={image.imageUrl[0] + randomString}\n              randomString={randomString}\n            />\n          ) : (\n            ''\n          ),\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GroupImages;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  changeErrorText,\n  clearPage,\n  getComposedImage,\n  setInputText,\n} from './store/images-reducer';\nimport GroupImages from './components/GroupImages/GroupImages';\nimport Image from './components/Image/Image';\nimport { ImageType } from './types/types';\nimport { AppStateType } from './store/store';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const [isGroup, setGroup] = useState(false);\n  const [timerId, setTimerId] = useState(1);\n  const [invalidInput, setInvalidInput] = useState(false);\n  const [isDelay, setDelay] = useState(false);\n  const tag: string = useSelector(\n    (state: AppStateType) => state.images.inputText,\n  );\n  const isLoading: boolean = useSelector(\n    (state: AppStateType) => state.images.isLoading,\n  );\n  const errorText: string = useSelector(\n    (state: AppStateType) => state.images.errorText,\n  );\n  const images: Array<ImageType> = useSelector(\n    (state: AppStateType) => state.images.images,\n  );\n  const AllTags = useSelector((state: AppStateType) => state.images.tags);\n  const uniqueTags = new Set(AllTags);\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const tags = [...uniqueTags];\n\n  const generateString = () => {\n    const possible = 'abcdefghijklmnopqrstuvwxyz';\n    const textLength = Math.floor(1 + Math.random() * 10);\n    let text = '';\n\n    for (let i = 0; i < textLength; i += 1)\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    return text;\n  };\n\n  const onSearchImage = () => {\n    if (tag) {\n      if (tag === 'delay') {\n        setDelay(true);\n        const intervalId = setInterval(() => {\n          const randomTag = [] as Array<string>;\n          randomTag.push(generateString());\n          dispatch(getComposedImage(randomTag));\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          setTimerId(intervalId);\n        }, 5000);\n      } else {\n        clearInterval(timerId);\n        setDelay(false);\n        const reqTags = tag.split(',');\n        if (reqTags.includes('')) {\n          dispatch(changeErrorText('По тегу ничего не найдено'));\n        } else {\n          dispatch(getComposedImage(reqTags));\n        }\n      }\n    } else {\n      dispatch(changeErrorText('Заполните поле тег'));\n    }\n  };\n\n  const onClearImages = () => {\n    dispatch(setInputText(''));\n    dispatch(clearPage());\n  };\n\n  const reTags = /^[A-Za-z,]+$/;\n  const onChange = (e: any) => {\n    if (!reTags.test(String(e.target.value))) {\n      setInvalidInput(true);\n    } else {\n      setInvalidInput(false);\n    }\n    setDelay(false);\n    dispatch(setInputText(e.target.value));\n    dispatch(changeErrorText(''));\n  };\n\n  const onGroupImages = () => {\n    setGroup(!isGroup);\n  };\n\n  return (\n    <div className=\"app-wrapper\">\n      <div className=\"menu\">\n        <input\n          className=\"menu__input\"\n          onChange={(e) => onChange(e)}\n          value={tag}\n        />\n        <button\n          type=\"button\"\n          disabled={\n            (invalidInput && !!tag) || isLoading || (isDelay && tag === 'delay')\n          }\n          onClick={() => onSearchImage()}\n        >\n          {isLoading ? 'Загрузка' : 'Загрузить'}\n        </button>\n        <button type=\"button\" onClick={() => onClearImages()}>\n          Очистить\n        </button>\n        <button type=\"button\" onClick={() => onGroupImages()}>\n          {!isGroup ? 'Группировать' : 'Разгруппировать'}\n        </button>\n        <div className=\"menu__error-message\">\n          {errorText && <span>{errorText}</span>}\n        </div>\n      </div>\n      {isGroup ? (\n        tags.map((groupTag) => (\n          <GroupImages\n            groupTag={groupTag}\n            images={images}\n            key={groupTag + generateString()}\n            randomString={generateString()}\n          />\n        ))\n      ) : (\n        <div className=\"group__images\">\n          {images.map((image) => (\n            <Image\n              imageUrl={image.imageUrl}\n              imageTag={image.imageTag}\n              key={image.imageUrl[0] + generateString()}\n              randomString={generateString()}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport imagesReducer from './images-reducer';\n\nconst rootReducer = combineReducers({\n  images: imagesReducer,\n});\n\nexport type AppStateType = ReturnType<typeof rootReducer>;\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}