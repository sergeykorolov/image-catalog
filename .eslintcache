[{"D:\\Projects\\React\\image-catalog\\src\\index.tsx":"1","D:\\Projects\\React\\image-catalog\\src\\App.tsx":"2","D:\\Projects\\React\\image-catalog\\src\\store\\images-reducer.ts":"3","D:\\Projects\\React\\image-catalog\\src\\store\\store.ts":"4","D:\\Projects\\React\\image-catalog\\src\\components\\Image\\Image.tsx":"5","D:\\Projects\\React\\image-catalog\\src\\components\\GroupImages\\GroupImages.tsx":"6"},{"size":320,"mtime":1612179094999,"results":"7","hashOfConfig":"8"},{"size":4426,"mtime":1612456311822,"results":"9","hashOfConfig":"8"},{"size":3884,"mtime":1612455197378,"results":"10","hashOfConfig":"8"},{"size":578,"mtime":1612454981008,"results":"11","hashOfConfig":"8"},{"size":799,"mtime":1612454596522,"results":"12","hashOfConfig":"8"},{"size":960,"mtime":1612454198413,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1hhrg0k",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\Projects\\React\\image-catalog\\src\\index.tsx",[],["28","29","30","31","32"],"D:\\Projects\\React\\image-catalog\\src\\App.tsx",["33"],"import React, { useState } from 'react';\nimport './App.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  changeErrorText,\n  clearPage,\n  getComposedImage,\n  setInputText,\n} from './store/images-reducer';\nimport GroupImages from './components/GroupImages/GroupImages';\nimport Image from './components/Image/Image';\nimport { ImageType } from './types/types';\nimport { AppStateType } from './store/store';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const [isGroup, setGroup] = useState(false);\n  const [timerId, setTimerId] = useState(1);\n  const [invalidInput, setInvalidInput] = useState(false);\n  const [isDelay, setDelay] = useState(false);\n  const tag: string = useSelector(\n    (state: AppStateType) => state.images.inputText,\n  );\n  const isLoading: boolean = useSelector(\n    (state: AppStateType) => state.images.isLoading,\n  );\n  const errorText: string = useSelector(\n    (state: AppStateType) => state.images.errorText,\n  );\n  const images: Array<ImageType> = useSelector(\n    (state: AppStateType) => state.images.images,\n  );\n  const AllTags = useSelector((state: AppStateType) => state.images.tags);\n  const uniqueTags = new Set(AllTags);\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const tags = [...uniqueTags];\n\n  const generateString = () => {\n    const possible = 'abcdefghijklmnopqrstuvwxyz';\n    const textLength = Math.floor(1 + Math.random() * 10);\n    let text = '';\n\n    for (let i = 0; i < textLength; i += 1)\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    return text;\n  };\n\n  const onSearchImage = () => {\n    if (tag) {\n      if (tag === 'delay') {\n        setDelay(true);\n        const intervalId = setInterval(() => {\n          const randomTag = [] as Array<string>;\n          randomTag.push(generateString());\n          dispatch(getComposedImage(randomTag));\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          setTimerId(intervalId);\n        }, 5000);\n      } else {\n        clearInterval(timerId);\n        setDelay(false);\n        const reqTags = tag.split(',');\n        if (reqTags.includes('')) {\n          dispatch(changeErrorText('По тегу ничего не найдено'));\n        } else {\n          dispatch(getComposedImage(reqTags));\n        }\n      }\n    } else {\n      dispatch(changeErrorText('Заполните поле тег'));\n    }\n  };\n\n  const onClearImages = () => {\n    dispatch(setInputText(''));\n    dispatch(clearPage());\n  };\n\n  const reTags = /^[A-Za-z,]+$/;\n  const onChange = (e: any) => {\n    if (!reTags.test(String(e.target.value))) {\n      setInvalidInput(true);\n    } else {\n      setInvalidInput(false);\n    }\n    setDelay(false);\n    dispatch(setInputText(e.target.value));\n    dispatch(changeErrorText(''));\n  };\n\n  const onGroupImages = () => {\n    setGroup(!isGroup);\n  };\n\n  return (\n    <div className=\"app-wrapper\">\n      <div className=\"menu\">\n        <input\n          className=\"menu__input\"\n          onChange={(e) => onChange(e)}\n          value={tag}\n        />\n        <button\n          type=\"button\"\n          disabled={\n            (invalidInput && !!tag) || isLoading || (isDelay && tag === 'delay')\n          }\n          onClick={() => onSearchImage()}\n        >\n          {isLoading ? 'Загрузка' : 'Загрузить'}\n        </button>\n        <button type=\"button\" onClick={() => onClearImages()}>\n          Очистить\n        </button>\n        <button type=\"button\" onClick={() => onGroupImages()}>\n          {!isGroup ? 'Группировать' : 'Разгруппировать'}\n        </button>\n        <div className=\"menu__error-message\">\n          {errorText && <span>{errorText}</span>}\n        </div>\n      </div>\n      {isGroup ? (\n        tags.map((groupTag) => (\n          <GroupImages\n            groupTag={groupTag}\n            images={images}\n            key={groupTag + generateString()}\n            randomString={generateString()}\n          />\n        ))\n      ) : (\n        <div className=\"group__images\">\n          {images.map((image) => (\n            <Image\n              imageUrl={image.imageUrl}\n              imageTag={image.imageTag}\n              key={image.imageUrl[0] + generateString()}\n              randomString={generateString()}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Projects\\React\\image-catalog\\src\\store\\images-reducer.ts",[],"D:\\Projects\\React\\image-catalog\\src\\store\\store.ts",[],"D:\\Projects\\React\\image-catalog\\src\\components\\Image\\Image.tsx",[],"D:\\Projects\\React\\image-catalog\\src\\components\\GroupImages\\GroupImages.tsx",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":82,"column":24,"nodeType":"46","messageId":"47","endLine":82,"endColumn":27,"suggestions":"48"},"lines-around-directive",["49"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["50","51"],"padding-line-between-statements",{"messageId":"52","fix":"53","desc":"54"},{"messageId":"55","fix":"56","desc":"57"},"suggestUnknown",{"range":"58","text":"59"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"58","text":"60"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[2571,2574],"unknown","never"]